{"version":3,"sources":["components/todo-input/TodoInput.js","components/todo-item/TodoItem.js","components/todo-list/TodoList.js","components/footer/Footer.js","containers/todo/Todo.js","actions/actionCreator.js","constants.js","components/title/Title.js","App.js","serviceWorker.js","reducers/tasks.js","store.js","reducers/filters.js","reducers/index.js","index.js"],"names":["ToDoInput","value","onChange","onKeyPress","className","placeholder","defaultProps","ToDoItem","text","isCompleted","removeTask","id","completeTask","onClick","ToDoList","tasksList","map","key","FILTERS_BTN","Footer","amount","activeFilter","changeFilter","connect","tasks","filters","addTask","type","props","useState","taskText","setTaskText","isTasksExist","length","Date","getTime","e","target","filter","task","filterTasks","getActiveTasksCounter","Title","title","App","Boolean","window","location","hostname","match","TASKS","load","namespace","preloadedState","state","rootReducer","combineReducers","composeEnhancers","compose","store","createStore","applyMiddleware","save","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.558cd1d2.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './todo-input.css';\r\n\r\nconst ToDoInput = ({ value, onChange, onKeyPress }) => (\r\n  <div className=\"todo-input-wrapper\">\r\n    <i className=\"material-icons  plus\">add</i>\r\n    <input\r\n      className=\"todo-input\"\r\n      placeholder=\"Click to add task\"\r\n      onChange={onChange}\r\n      onKeyPress={onKeyPress}\r\n      value={value}\r\n    />\r\n  </div>\r\n);\r\n\r\nToDoInput.propTypes = {\r\n  onChange: PropTypes.func,\r\n  onKeyPress: PropTypes.func,\r\n  value: PropTypes.string\r\n};\r\n\r\nToDoInput.defaultProps = {\r\n  onChange: () => {},\r\n  onKeyPress: () => {},\r\n  value: ''\r\n};\r\n\r\nexport default ToDoInput;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './todo-item.css';\r\n\r\nconst ToDoItem = ({ text, isCompleted, removeTask, id, completeTask }) => (\r\n  <li className=\"todo-item\">\r\n    <i\r\n      onClick={() => {\r\n        completeTask(id);\r\n      }}\r\n      className=\"material-icons\"\r\n    >\r\n      {isCompleted ? 'done' : 'panorama_fish_eye'}\r\n    </i>\r\n    <span className={isCompleted ? 'completed text' : 'text'}>{text}</span>\r\n\r\n    <i onClick={() => removeTask(id)} className=\"material-icons close-item\">\r\n      close\r\n    </i>\r\n  </li>\r\n);\r\n\r\nToDoItem.propTypes = {\r\n  text: PropTypes.string,\r\n  isCompleted: PropTypes.bool,\r\n  removeTask: PropTypes.func,\r\n  id: PropTypes.number\r\n};\r\n\r\nToDoItem.defaultProps = {\r\n  text: '',\r\n  isCompleted: false,\r\n  removeTask: () => {},\r\n  id: 0\r\n};\r\n\r\nexport default ToDoItem;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport ToDoItem from '../todo-item/TodoItem';\r\n\r\nimport './todo-list.css';\r\n\r\nconst ToDoList = ({ tasksList, removeTask, completeTask }) => (\r\n  <ul className=\"todo-list\">\r\n    {tasksList.map(({ id, text, isCompleted }) => (\r\n      <ToDoItem\r\n        removeTask={removeTask}\r\n        id={id}\r\n        key={id}\r\n        text={text}\r\n        isCompleted={isCompleted}\r\n        completeTask={completeTask}\r\n      />\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nToDoList.propTypes = {\r\n  tasksList: PropTypes.array,\r\n  removeTask: PropTypes.func,\r\n  completeTask: PropTypes.func\r\n};\r\n\r\nToDoList.defaultProps = {\r\n  tasksList: [],\r\n  removeTask: () => {},\r\n  completeTask: () => {}\r\n};\r\n\r\nexport default ToDoList;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './footer.css';\r\n\r\nconst FILTERS_BTN = [\r\n  {\r\n    text: 'All',\r\n    id: 'all'\r\n  },\r\n  {\r\n    text: 'Active',\r\n    id: 'active'\r\n  },\r\n  {\r\n    text: 'Completed',\r\n    id: 'completed'\r\n  }\r\n];\r\n\r\nconst Footer = ({ amount, activeFilter, changeFilter }) => (\r\n  <div className=\"footer\">\r\n    <span className=\"amount\">{`${amount} Tasks active`}</span>\r\n    <div className=\"btn-group\">\r\n      {FILTERS_BTN.map(({ text, id }) => (\r\n        <button\r\n          onClick={() => {\r\n            changeFilter(id);\r\n          }}\r\n          key={id}\r\n          className={id === activeFilter ? 'filter-btn active' : 'filter-btn'}\r\n        >\r\n          {text}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nFooter.propTypes = {\r\n  changeFilter: PropTypes.func,\r\n  amount: PropTypes.number,\r\n  activeFilter: PropTypes.string\r\n};\r\n\r\nFooter.defaultProps = {\r\n  changeFilter: () => {},\r\n  amount: 0,\r\n  activeFilter: 'all'\r\n};\r\n\r\nexport default Footer;\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ToDoInput from '../../components/todo-input/TodoInput';\r\nimport ToDoList from '../../components/todo-list/TodoList';\r\nimport Footer from '../../components/footer/Footer';\r\n\r\nimport {\r\n  addTask,\r\n  removeTask,\r\n  completeTask,\r\n  changeFilter\r\n} from '../../actions/actionCreator';\r\n\r\nimport './todo.css';\r\n\r\nconst Todo = props => {\r\n  const [taskText, setTaskText] = useState('');\r\n  const { tasks } = props;\r\n  const isTasksExist = tasks && tasks.length > 0;\r\n\r\n  const handleInputChange = e => {\r\n    setTaskText(e.target.value);\r\n  };\r\n\r\n  const addTask = ({ key }) => {\r\n    if (taskText.length > 0 && key === 'Enter') {\r\n      const { addTask } = props;\r\n\r\n      addTask(new Date().getTime(), taskText, false);\r\n\r\n      setTaskText('');\r\n    }\r\n  };\r\n\r\n  const filterTasks = (tasks, activeFilter) => {\r\n    switch (activeFilter) {\r\n      case 'completed':\r\n        return tasks.filter(task => task.isCompleted);\r\n        // eslint-disable-next-line no-unreachable\r\n        break;\r\n      case 'active':\r\n        return tasks.filter(task => !task.isCompleted);\r\n        // eslint-disable-next-line no-unreachable\r\n        break;\r\n      default:\r\n        return tasks;\r\n    }\r\n  };\r\n\r\n  const getActiveTasksCounter = tasks =>\r\n    tasks.filter(task => !task.isCompleted).length;\r\n\r\n  return (\r\n    <div className=\"todo-wrapper\">\r\n      <ToDoInput\r\n        onKeyPress={addTask}\r\n        onChange={handleInputChange}\r\n        value={taskText}\r\n      />\r\n      {isTasksExist && (\r\n        <ToDoList\r\n          removeTask={props.removeTask}\r\n          completeTask={props.completeTask}\r\n          tasksList={filterTasks(tasks, props.filters)}\r\n        />\r\n      )}\r\n      {isTasksExist && (\r\n        <Footer\r\n          changeFilter={props.changeFilter}\r\n          amount={getActiveTasksCounter(props.tasks)}\r\n          activeFilter={props.filters}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  ({ tasks, filters }) => ({\r\n    tasks,\r\n    filters\r\n  }),\r\n  { addTask, removeTask, completeTask, changeFilter }\r\n)(Todo);\r\n","import {\r\n  ADD_TASK,\r\n  REMOVE_TASK,\r\n  COMPLETE_TASK,\r\n  CHANGE_FILTER\r\n} from '../constants';\r\n\r\nexport const addTask = (id, text, isCompleted) => ({\r\n  type: ADD_TASK,\r\n  id,\r\n  text,\r\n  isCompleted\r\n});\r\n\r\nexport const removeTask = id => ({\r\n  type: REMOVE_TASK,\r\n  id\r\n});\r\n\r\nexport const completeTask = id => ({\r\n  type: COMPLETE_TASK,\r\n  id\r\n});\r\n\r\nexport const changeFilter = activeFilter => ({\r\n  type: CHANGE_FILTER,\r\n  activeFilter\r\n});\r\n","export const ADD_TASK = 'ADD_TASK';\r\nexport const REMOVE_TASK = 'REMOVE_TASK';\r\nexport const COMPLETE_TASK = 'COMPLETE_TASK';\r\nexport const CHANGE_FILTER = 'CHANGE_FILTER';\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './title.css';\r\n\r\nexport const Title = ({ title }) => <h1 className=\"title\">{title}</h1>;\r\n\r\nTitle.propTypes = {\r\n  title: PropTypes.string\r\n};\r\n\r\nTitle.defaultProps = {\r\n  title: 'Simple title'\r\n};\r\n","import React, { Fragment } from 'react';\nimport Todo from './containers/todo/Todo';\nimport { Title } from './components/title/Title';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Fragment>\n      <Title title=\"Todo App\" />\n      <Todo />\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ADD_TASK, REMOVE_TASK, COMPLETE_TASK } from '../constants';\r\nimport { load } from 'redux-localstorage-simple';\r\n\r\nlet TASKS = load({ namespace: 'todo-list' });\r\n\r\nif (!TASKS || !TASKS.tasks || !TASKS.tasks.length) {\r\n  TASKS = { tasks: [] };\r\n}\r\n\r\n// const TASKS = [\r\n//   {\r\n//     id: 1,\r\n//     text: 'Learn ReactJS',\r\n//     isCompleted: true\r\n//   },\r\n//   {\r\n//     id: 2,\r\n//     text: 'Learn Redux',\r\n//     isCompleted: false\r\n//   },\r\n//   {\r\n//     id: 3,\r\n//     text: 'Learn React Router',\r\n//     isCompleted: false\r\n//   }\r\n// ];\r\n\r\nconst tasks = (state = TASKS.tasks, { id, text, isCompleted, type }) => {\r\n  switch (type) {\r\n    case ADD_TASK:\r\n      return [\r\n        ...state,\r\n        {\r\n          id,\r\n          text,\r\n          isCompleted\r\n        }\r\n      ];\r\n    case REMOVE_TASK:\r\n      return [...state].filter(task => task.id !== id);\r\n    case COMPLETE_TASK:\r\n      return [...state].map(task => {\r\n        if (task.id === id) {\r\n          task.isCompleted = !task.isCompleted;\r\n        }\r\n        return task;\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default tasks;\r\n","import { createStore, compose, applyMiddleware } from 'redux';\r\nimport rootReducer from './reducers/index';\r\nimport { save } from 'redux-localstorage-simple';\r\n\r\n/* eslint-disable no-underscore-dangle */\r\nconst composeEnhancers =\r\n  process.env.NODE_ENV !== 'production' &&\r\n  typeof window === 'object' &&\r\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})\r\n    : compose;\r\n/* eslint-enable */\r\n\r\nconst configureStore = preloadedState =>\r\n  createStore(\r\n    rootReducer,\r\n    preloadedState,\r\n    composeEnhancers(applyMiddleware(save({ namespace: 'todo-list' })))\r\n  );\r\n\r\nconst store = configureStore({});\r\n\r\nexport default store;\r\n","import { CHANGE_FILTER } from '../constants';\r\n\r\nconst BASE_FILTER = 'all';\r\n\r\nconst filter = (state = BASE_FILTER, { type, activeFilter }) => {\r\n  switch (type) {\r\n    case CHANGE_FILTER:\r\n      return activeFilter;\r\n      // eslint-disable-next-line no-unreachable\r\n      break;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default filter;\r\n","import { combineReducers } from 'redux';\r\nimport tasks from './tasks';\r\nimport filters from './filters';\r\n\r\nconst rootReducer = combineReducers({ tasks, filters });\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}